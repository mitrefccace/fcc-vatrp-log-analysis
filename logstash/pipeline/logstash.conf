input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}
}
filter {
	grok {
		match => { "message" => "%{TIMESTAMP_ISO8601:logtimestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
		overwrite => [ "message" ]
	}
	date {

		match => ["logtimestamp" , "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
		timezone => "America/New_York"
		target => "@timestamp"		
	}
	mutate {
         copy => { "message" => "saved_message" }
    }
	mutate {
         copy => { "message" => "sip_message" }
    }
	mutate {
         copy => { "message" => "parsed_message" }
    }	
	if ([message] =~ /TLS:\/\//) {	
	   mutate {
		split => [ "parsed_message", "TLS://" ]
		add_field => { "sip_url" => "%{[parsed_message][1]}" }
	   }
	}							
	grok {
	   match => {"sip_url" => "%{URIHOST:sipurl}"}
	}

	if ([message] =~ /SIP\/2.0 [0-9]{3}/) {	
		mutate {
			split => [ "sip_message", "SIP/2.0" ]
			add_field => { "sip_code" => "%{[sip_message][1]}" }
	   }
		grok {
			 match => {"sip_code" => "%{POSINT:sipcode} (?<sip_explanation>(.*)(?=Via))(?<sip_headers>(.*)(?=Via))" }
        }		   
	} else {
		if ([message] =~ /SIP\/2.0/) {
		   grok {
			match => {"sip_message" => "%{WORD:sip} %{WORD:sipm}:%{USER:sipuser}@%{URIHOST:siphost}" }
		   }
		   if "_grokparsefailure" in [tags] {
			   grok {
				match => {"sip_message" => "%{WORD:sip} %{WORD:sipm}:%{URIHOST:siphost}" }
		       }
           }		   
		}		
	}			
	mutate {
	   remove_field => [ "sip_code", "sip_url", "sip_message", "parsed_message", "sipm" ]
	}																
}
output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
	}
	stdout { 
	   codec => rubydebug 
	}	  
}
